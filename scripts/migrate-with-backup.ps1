# Script PowerShell pour backup automatique avant migration Prisma
# Usage: 
#   .\scripts\migrate-with-backup.ps1 dev      # Pour dev local
#   .\scripts\migrate-with-backup.ps1 prod     # Pour production

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("dev", "prod")]
    [string]$Environment
)

$ErrorActionPreference = "Stop"

Write-Host ""
Write-Host "üîí ====================================" -ForegroundColor Cyan
Write-Host "   MIGRATION PRISMA S√âCURIS√âE" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# D√©terminer l'environnement
if ($Environment -eq "dev") {
    $envLabel = "D√âVELOPPEMENT (LOCAL)"
    $envColor = "Green"
    $envFile = ".env.local"
} else {
    $envLabel = "PRODUCTION"
    $envColor = "Red"
    $envFile = ".env"
}

Write-Host "üåç Environnement : $envLabel" -ForegroundColor $envColor
Write-Host ""

# V√©rifier si le fichier .env existe
if (-not (Test-Path $envFile)) {
    Write-Host "‚ùå Erreur : Fichier $envFile introuvable" -ForegroundColor Red
    Write-Host ""
    if ($Environment -eq "dev") {
        Write-Host "üí° Pour le d√©veloppement local :" -ForegroundColor Yellow
        Write-Host "   1. Copiez .env.example vers .env.local" -ForegroundColor White
        Write-Host "   2. Configurez DATABASE_URL avec votre base locale" -ForegroundColor White
    } else {
        Write-Host "üí° Pour la production :" -ForegroundColor Yellow
        Write-Host "   1. Cr√©ez un fichier .env avec DIRECT_DATABASE_URL" -ForegroundColor White
        Write-Host "   2. Utilisez les credentials de production" -ForegroundColor White
    }
    exit 1
}

# Charger les variables d'environnement
Get-Content $envFile | ForEach-Object {
    if ($_ -match '^([^=]+)=(.*)$') {
        $key = $matches[1].Trim()
        $value = $matches[2].Trim().Trim('"')
        [Environment]::SetEnvironmentVariable($key, $value, "Process")
    }
}

# D√©terminer quelle URL utiliser
if ($Environment -eq "dev") {
    $DATABASE_URL = $env:DATABASE_URL
    if (-not $DATABASE_URL) {
        Write-Host "‚ùå Erreur : DATABASE_URL non trouv√©e dans $envFile" -ForegroundColor Red
        exit 1
    }
} else {
    $DATABASE_URL = $env:DIRECT_DATABASE_URL
    if (-not $DATABASE_URL) {
        Write-Host "‚ùå Erreur : DIRECT_DATABASE_URL non trouv√©e dans $envFile" -ForegroundColor Red
        exit 1
    }
}

# Cr√©er le dossier backups s'il n'existe pas
if (-not (Test-Path "backups")) {
    New-Item -ItemType Directory -Path "backups" | Out-Null
}

# Cr√©er un sous-dossier pour l'environnement
$backupDir = "backups\$Environment"
if (-not (Test-Path $backupDir)) {
    New-Item -ItemType Directory -Path $backupDir | Out-Null
}

# Nom du fichier de backup avec timestamp
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$backupFile = "$backupDir\backup_${Environment}_$timestamp.sql"

Write-Host "üìä Base de donn√©es : $($DATABASE_URL -replace ':[^@]+@', ':****@')" -ForegroundColor White
Write-Host "üìÅ Backup sera sauvegard√© dans : $backupFile" -ForegroundColor White
Write-Host ""

# Confirmation
if ($Environment -eq "prod") {
    Write-Host "‚ö†Ô∏è  ATTENTION : Cette op√©ration va cr√©er un backup de la base de PRODUCTION" -ForegroundColor Red
} else {
    Write-Host "‚úÖ Cette op√©ration va cr√©er un backup de la base de D√âVELOPPEMENT" -ForegroundColor Yellow
}
Write-Host ""
$confirmation = Read-Host "Continuer ? (O/N)"

if ($confirmation -ne "O" -and $confirmation -ne "o") {
    Write-Host ""
    Write-Host "‚ùå Op√©ration annul√©e" -ForegroundColor Red
    exit 0
}

Write-Host ""
Write-Host "‚è≥ Cr√©ation du backup en cours..." -ForegroundColor Yellow

try {
    # V√©rifier si pg_dump est disponible
    $pgDumpPath = Get-Command pg_dump -ErrorAction SilentlyContinue
    
    if (-not $pgDumpPath) {
        Write-Host "‚ùå Erreur : pg_dump non trouv√©" -ForegroundColor Red
        Write-Host ""
        Write-Host "üìù Solutions :" -ForegroundColor Yellow
        Write-Host "   1. Installer PostgreSQL : https://www.postgresql.org/download/" -ForegroundColor White
        Write-Host "   2. Ou utiliser Vercel Dashboard > Storage > Postgres > Backups (prod)" -ForegroundColor White
        Write-Host ""
        exit 1
    }
    
    # Cr√©er le backup
    $env:DATABASE_URL = $DATABASE_URL
    & pg_dump $DATABASE_URL > $backupFile
    
    if (Test-Path $backupFile) {
        $fileSize = (Get-Item $backupFile).Length / 1MB
        Write-Host ""
        Write-Host "‚úÖ Backup cr√©√© avec succ√®s !" -ForegroundColor Green
        Write-Host "   üìÅ Fichier : $backupFile" -ForegroundColor White
        Write-Host "   üìä Taille : $([math]::Round($fileSize, 2)) MB" -ForegroundColor White
        Write-Host ""
        
        # Demander si on veut migrer maintenant
        Write-Host "üîÑ Voulez-vous lancer la migration maintenant ? (O/N)" -ForegroundColor Cyan
        $migrate = Read-Host
        
        if ($migrate -eq "O" -or $migrate -eq "o") {
            Write-Host ""
            Write-Host "‚è≥ Migration en cours..." -ForegroundColor Yellow
            Write-Host ""
            
            if ($Environment -eq "dev") {
                # Migration dev (interactive)
                $migrationName = Read-Host "Nom de la migration (ex: add_new_field)"
                if ($migrationName) {
                    & npx prisma migrate dev --name $migrationName
                } else {
                    & npx prisma migrate dev
                }
            } else {
                # Migration prod (deploy)
                & npx prisma migrate deploy
            }
            
            if ($LASTEXITCODE -eq 0) {
                Write-Host ""
                Write-Host "‚úÖ Migration termin√©e avec succ√®s !" -ForegroundColor Green
                Write-Host ""
                Write-Host "üìù Prochaines √©tapes :" -ForegroundColor Cyan
                Write-Host "   1. V√©rifier les donn√©es dans Prisma Studio : pnpm db:studio" -ForegroundColor White
                if ($Environment -eq "dev") {
                    Write-Host "   2. Tester l'application : pnpm dev:clean" -ForegroundColor White
                    Write-Host "   3. Si tout est OK, migrer en prod : pnpm db:migrate:prod" -ForegroundColor White
                } else {
                    Write-Host "   2. Tester l'application en production" -ForegroundColor White
                    Write-Host "   3. Si tout est OK, commit et push le code" -ForegroundColor White
                }
            } else {
                Write-Host ""
                Write-Host "‚ùå Erreur lors de la migration" -ForegroundColor Red
                Write-Host ""
                Write-Host "üîÑ Pour restaurer le backup :" -ForegroundColor Yellow
                Write-Host "   pnpm db:restore" -ForegroundColor White
                Write-Host ""
                Write-Host "Ou manuellement :" -ForegroundColor Yellow
                Write-Host "   psql `$env:DATABASE_URL < $backupFile" -ForegroundColor White
            }
        } else {
            Write-Host ""
            Write-Host "‚úÖ Backup cr√©√©. Migration annul√©e." -ForegroundColor Green
            Write-Host ""
            Write-Host "üìù Pour migrer plus tard :" -ForegroundColor Cyan
            if ($Environment -eq "dev") {
                Write-Host "   pnpm db:migrate" -ForegroundColor White
            } else {
                Write-Host "   npx prisma migrate deploy" -ForegroundColor White
            }
        }
    } else {
        Write-Host ""
        Write-Host "‚ùå Erreur : Le fichier de backup n'a pas √©t√© cr√©√©" -ForegroundColor Red
        exit 1
    }
    
} catch {
    Write-Host ""
    Write-Host "‚ùå Erreur lors de la cr√©ation du backup : $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üîí ====================================" -ForegroundColor Cyan
Write-Host ""
