# Script PowerShell pour restaurer une base de donn√©es depuis un backup
# Usage: .\scripts\restore-backup.ps1

param(
    [string]$BackupFile
)

$ErrorActionPreference = "Stop"

Write-Host ""
Write-Host "üîÑ ====================================" -ForegroundColor Cyan
Write-Host "   RESTAURATION DEPUIS BACKUP" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier si .env existe
if (-not (Test-Path ".env")) {
    Write-Host "‚ùå Erreur : Fichier .env introuvable" -ForegroundColor Red
    exit 1
}

# Charger les variables d'environnement
Get-Content .env | ForEach-Object {
    if ($_ -match '^([^=]+)=(.*)$') {
        $key = $matches[1].Trim()
        $value = $matches[2].Trim().Trim('"')
        [Environment]::SetEnvironmentVariable($key, $value, "Process")
    }
}

$DATABASE_URL = $env:DIRECT_DATABASE_URL

if (-not $DATABASE_URL) {
    Write-Host "‚ùå Erreur : DIRECT_DATABASE_URL non trouv√©e dans .env" -ForegroundColor Red
    exit 1
}

# Si aucun fichier sp√©cifi√©, lister les backups disponibles
if (-not $BackupFile) {
    Write-Host "üìÅ Backups disponibles :" -ForegroundColor Cyan
    Write-Host ""
    
    if (Test-Path "backups") {
        $backups = Get-ChildItem -Path "backups" -Filter "*.sql" | Sort-Object LastWriteTime -Descending
        
        if ($backups.Count -eq 0) {
            Write-Host "‚ùå Aucun backup trouv√© dans le dossier 'backups'" -ForegroundColor Red
            Write-Host ""
            Write-Host "üí° Pour cr√©er un backup :" -ForegroundColor Yellow
            Write-Host "   pnpm db:backup" -ForegroundColor White
            exit 1
        }
        
        $i = 1
        foreach ($backup in $backups) {
            $size = [math]::Round($backup.Length / 1MB, 2)
            $date = $backup.LastWriteTime.ToString("dd/MM/yyyy HH:mm:ss")
            Write-Host "   $i. $($backup.Name)" -ForegroundColor White
            Write-Host "      üìÖ $date | üìä $size MB" -ForegroundColor Gray
            Write-Host ""
            $i++
        }
        
        Write-Host ""
        $selection = Read-Host "S√©lectionnez un backup (1-$($backups.Count)) ou Q pour quitter"
        
        if ($selection -eq "Q" -or $selection -eq "q") {
            Write-Host ""
            Write-Host "‚ùå Op√©ration annul√©e" -ForegroundColor Red
            exit 0
        }
        
        $index = [int]$selection - 1
        if ($index -lt 0 -or $index -ge $backups.Count) {
            Write-Host ""
            Write-Host "‚ùå S√©lection invalide" -ForegroundColor Red
            exit 1
        }
        
        $BackupFile = $backups[$index].FullName
    } else {
        Write-Host "‚ùå Dossier 'backups' introuvable" -ForegroundColor Red
        exit 1
    }
}

# V√©rifier que le fichier existe
if (-not (Test-Path $BackupFile)) {
    Write-Host "‚ùå Erreur : Fichier de backup introuvable : $BackupFile" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "‚ö†Ô∏è  ATTENTION : Cette op√©ration va √âCRASER toutes les donn√©es actuelles !" -ForegroundColor Red
Write-Host ""
Write-Host "üìÅ Backup s√©lectionn√© : $BackupFile" -ForegroundColor White
Write-Host "üìä Base de donn√©es : $($DATABASE_URL -replace ':[^@]+@', ':****@')" -ForegroundColor White
Write-Host ""

# Triple confirmation
Write-Host "‚ö†Ô∏è  √ätes-vous ABSOLUMENT S√õR de vouloir restaurer ce backup ? (O/N)" -ForegroundColor Yellow
$confirmation1 = Read-Host

if ($confirmation1 -ne "O" -and $confirmation1 -ne "o") {
    Write-Host ""
    Write-Host "‚ùå Op√©ration annul√©e" -ForegroundColor Red
    exit 0
}

Write-Host ""
Write-Host "‚ö†Ô∏è  Derni√®re confirmation : tapez 'RESTAURER' pour continuer" -ForegroundColor Red
$confirmation2 = Read-Host

if ($confirmation2 -ne "RESTAURER") {
    Write-Host ""
    Write-Host "‚ùå Op√©ration annul√©e" -ForegroundColor Red
    exit 0
}

Write-Host ""
Write-Host "‚è≥ Restauration en cours..." -ForegroundColor Yellow
Write-Host ""

try {
    # V√©rifier si psql est disponible
    $psqlPath = Get-Command psql -ErrorAction SilentlyContinue
    
    if (-not $psqlPath) {
        Write-Host "‚ùå Erreur : psql non trouv√©" -ForegroundColor Red
        Write-Host ""
        Write-Host "üìù Installer PostgreSQL : https://www.postgresql.org/download/" -ForegroundColor Yellow
        exit 1
    }
    
    # Restaurer le backup
    $env:DATABASE_URL = $DATABASE_URL
    Get-Content $BackupFile | & psql $DATABASE_URL
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "‚úÖ Restauration termin√©e avec succ√®s !" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìù Prochaines √©tapes :" -ForegroundColor Cyan
        Write-Host "   1. V√©rifier les donn√©es : pnpm db:studio" -ForegroundColor White
        Write-Host "   2. Tester l'application : pnpm dev:clean" -ForegroundColor White
        Write-Host "   3. Cr√©er un nouveau backup : pnpm db:backup" -ForegroundColor White
    } else {
        Write-Host ""
        Write-Host "‚ùå Erreur lors de la restauration" -ForegroundColor Red
        Write-Host ""
        Write-Host "üí° V√©rifiez :" -ForegroundColor Yellow
        Write-Host "   - La connexion √† la base de donn√©es" -ForegroundColor White
        Write-Host "   - Les permissions sur la base" -ForegroundColor White
        Write-Host "   - Le format du fichier de backup" -ForegroundColor White
        exit 1
    }
    
} catch {
    Write-Host ""
    Write-Host "‚ùå Erreur lors de la restauration : $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üîÑ ====================================" -ForegroundColor Cyan
Write-Host ""
