// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Optimisations pour la production
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  // Production Vercel : PRISMA_DATABASE_URL (prisma://)
  // Développement : DATABASE_URL (postgresql://)
  url      = env("PRISMA_DATABASE_URL")
  // URL directe pour migrations et Prisma Studio
  directUrl = env("DIRECT_DATABASE_URL")
}

// =====================================================
// USER & AUTHENTICATION
// =====================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// =====================================================
// LICENSES
// =====================================================

model License {
  id            String   @id @default(cuid())
  licenseKey    String   @unique @map("license_key")
  apiToken      String?  @unique @default(cuid()) @map("api_token")
  clientName    String   @map("client_name")
  status        LicenseStatus @default(INACTIVE)
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  siteUrl       String?  @map("site_url")
  isAssociated  Boolean  @default(false) @map("is_associated")
  lastUpdate    DateTime @default(now()) @map("last_update")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  emailStats    EmailStats[]
  emailStatsMonthly EmailStatsMonthly[]
  smsStats      SmsStats[]
  smsStatsMonthly SmsStatsMonthly[]
  deeplStats    DeeplStats[]
  deeplStatsMonthly DeeplStatsMonthly[]
  openaiStats   OpenaiStats[]
  openaiStatsMonthly OpenaiStatsMonthly[]
  emailLogs     EmailLog[]
  smsLogs       SmsLog[]
  pois          Poi[]

  @@map("licenses")
}

enum LicenseStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

// =====================================================
// EMAIL STATISTICS
// =====================================================

model EmailStats {
  id               String   @id @default(cuid())
  licenseId        String   @map("license_id")
  emailsSent       Int      @default(0) @map("emails_sent")
  lastUpdate       DateTime @default(now()) @map("last_update")
  createdAt        DateTime @default(now()) @map("created_at")

  license          License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("email_stats")
}

model EmailStatsMonthly {
  id               String   @id @default(cuid())
  licenseId        String   @map("license_id")
  statYear         Int      @map("stat_year")
  statMonth        Int      @map("stat_month")
  emailsSent       Int      @default(0) @map("emails_sent")
  lastUpdate       DateTime @default(now()) @map("last_update")
  createdAt        DateTime @default(now()) @map("created_at")

  license          License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, statYear, statMonth])
  @@index([licenseId])
  @@map("email_stats_monthly")
}

model EmailLog {
  id          String   @id @default(cuid())
  licenseId   String   @map("license_id")
  emailTo     String   @map("email_to")
  subject     String?
  status      String   // sent, delivered, opened, clicked, bounced, spam
  sendDate    DateTime @map("send_date")
  createdAt   DateTime @default(now()) @map("created_at")

  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([sendDate])
  @@map("email_logs")
}

// =====================================================
// SMS STATISTICS
// =====================================================

model SmsStats {
  id           String   @id @default(cuid())
  licenseId    String   @map("license_id")
  smsSent      Int      @default(0) @map("sms_sent")
  totalCost    Decimal  @default(0) @map("total_cost") @db.Decimal(10, 2)
  lastUpdate   DateTime @default(now()) @map("last_update")
  createdAt    DateTime @default(now()) @map("created_at")

  license      License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("sms_stats")
}

model SmsStatsMonthly {
  id           String   @id @default(cuid())
  licenseId    String   @map("license_id")
  statYear     Int      @map("stat_year")
  statMonth    Int      @map("stat_month")
  smsSent      Int      @default(0) @map("sms_sent")
  totalCost    Decimal  @default(0) @map("total_cost") @db.Decimal(10, 2)
  lastUpdate   DateTime @default(now()) @map("last_update")
  createdAt    DateTime @default(now()) @map("created_at")

  license      License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, statYear, statMonth])
  @@index([licenseId])
  @@map("sms_stats_monthly")
}

model SmsLog {
  id              String   @id @default(cuid())
  licenseId       String   @map("license_id")
  phone           String
  country         String?
  status          String   // sent, delivered, failed
  cost            Decimal  @default(0) @db.Decimal(10, 4)
  pricingVersion  String?  @map("pricing_version") // Version du tarif utilisé (ex: "2025-01")
  sendDate        DateTime @map("send_date")
  createdAt       DateTime @default(now()) @map("created_at")

  license         License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([sendDate])
  @@index([country])
  @@map("sms_logs")
}

// =====================================================
// DEEPL STATISTICS
// =====================================================

model DeeplStats {
  id                    String   @id @default(cuid())
  licenseId             String   @map("license_id")
  translationsCount     Int      @default(0) @map("translations_count")
  charactersTranslated  Int      @default(0) @map("characters_translated")
  lastUpdate            DateTime @default(now()) @map("last_update")
  createdAt             DateTime @default(now()) @map("created_at")

  license               License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("deepl_stats")
}

model DeeplStatsMonthly {
  id                    String   @id @default(cuid())
  licenseId             String   @map("license_id")
  statYear              Int      @map("stat_year")
  statMonth             Int      @map("stat_month")
  translationsCount     Int      @default(0) @map("translations_count")
  charactersTranslated  Int      @default(0) @map("characters_translated")
  lastUpdate            DateTime @default(now()) @map("last_update")
  createdAt             DateTime @default(now()) @map("created_at")

  license               License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, statYear, statMonth])
  @@index([licenseId])
  @@map("deepl_stats_monthly")
}

// =====================================================
// OPENAI STATISTICS
// =====================================================

model OpenaiStats {
  id                 String   @id @default(cuid())
  licenseId          String   @map("license_id")
  requestsCount      Int      @default(0) @map("requests_count")
  promptTokens       Int      @default(0) @map("prompt_tokens")
  completionTokens   Int      @default(0) @map("completion_tokens")
  totalTokens        Int      @default(0) @map("total_tokens")
  totalCost          Decimal  @default(0) @map("total_cost") @db.Decimal(10, 4)
  lastUpdate         DateTime @default(now()) @map("last_update")
  createdAt          DateTime @default(now()) @map("created_at")

  license            License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("openai_stats")
}

model OpenaiStatsMonthly {
  id                 String   @id @default(cuid())
  licenseId          String   @map("license_id")
  statYear           Int      @map("stat_year")
  statMonth          Int      @map("stat_month")
  requestsCount      Int      @default(0) @map("requests_count")
  promptTokens       Int      @default(0) @map("prompt_tokens")
  completionTokens   Int      @default(0) @map("completion_tokens")
  totalTokens        Int      @default(0) @map("total_tokens")
  totalCost          Decimal  @default(0) @map("total_cost") @db.Decimal(10, 4)
  lastUpdate         DateTime @default(now()) @map("last_update")
  createdAt          DateTime @default(now()) @map("created_at")

  license            License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, statYear, statMonth])
  @@index([licenseId])
  @@map("openai_stats_monthly")
}

// =====================================================
// POI (Points of Interest)
// =====================================================

model Poi {
  id          String   @id @default(cuid())
  licenseId   String   @map("license_id")
  poiId       String   @map("poi_id")
  name        String
  type        String?
  address     String?
  latitude    Float
  longitude   Float
  visitCount  Int      @default(0) @map("visit_count")
  seasonData  String?  @map("season_data") // JSON stored as string
  syncDate    DateTime @map("sync_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@unique([licenseId, poiId])
  @@index([licenseId])
  @@index([latitude, longitude])
  @@map("pois")
}

// =====================================================
// API KEYS CONFIGURATION
// =====================================================

model ApiKey {
  id        String   @id @default(cuid())
  service   String   @unique // deepl, openai, brevo, mapbox
  key       String
  isActive  Boolean  @default(true) @map("is_active")
  lastPush  DateTime? @map("last_push")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}

// =====================================================
// SMS PRICING HISTORY
// =====================================================

model SmsPricingVersion {
  id          String   @id @default(cuid())
  version     String   // Ex: "2025-01", "2025-02", etc.
  description String?  // Ex: "Tarifs mis à jour janvier 2025"
  isActive    Boolean  @default(false) // Une seule version active à la fois
  effectiveFrom DateTime @map("effective_from") // Date d'entrée en vigueur
  effectiveTo   DateTime? @map("effective_to")   // Date de fin (null = active)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  pricingRules SmsPricingRule[]

  @@unique([version])
  @@index([isActive])
  @@index([effectiveFrom])
  @@map("sms_pricing_versions")
}

model SmsPricingRule {
  id          String   @id @default(cuid())
  versionId   String   @map("version_id")
  country     String   // Nom du pays (ex: "France", "Germany")
  pricePerSms Decimal  @map("price_per_sms") @db.Decimal(10, 4) // Prix par SMS en euros
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  version     SmsPricingVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, country])
  @@index([country])
  @@map("sms_pricing_rules")
}
