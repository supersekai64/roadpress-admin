// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Optimisations pour la production
  binaryTargets = ["native", "debian-openssl-3.0.x"]
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  // Sur Vercel : utilise PRISMA_DATABASE_URL (prisma+postgres://)
  // En local : utilise DATABASE_URL 
  url      = env("PRISMA_DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// =====================================================
// USER & AUTHENTICATION
// =====================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("admin")
  
  // Two-Factor Authentication (2FA)
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")
  twoFactorSecret  String? @map("two_factor_secret") // Encrypted TOTP secret
  backupCodes      String? @map("backup_codes") // JSON array of encrypted backup codes
  force2FA         Boolean @default(false) @map("force_2fa") // Force 2FA activation at next login
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trustedDevices TrustedDevice[]
  twoFactorLogs  TwoFactorLog[]

  @@map("users")
}

// =====================================================
// TRUSTED DEVICES (Remember Me)
// =====================================================

model TrustedDevice {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  deviceToken   String   @unique @map("device_token") // Unique token for this device
  deviceName    String?  @map("device_name") // Browser + OS (e.g., "Chrome on Windows")
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  lastUsed      DateTime @default(now()) @map("last_used")
  expiresAt     DateTime @map("expires_at") // 30 days from creation
  createdAt     DateTime @default(now()) @map("created_at")

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceToken])
  @@index([expiresAt])
  @@map("trusted_devices")
}

// =====================================================
// TWO-FACTOR AUTHENTICATION LOGS
// =====================================================

model TwoFactorLog {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  action        TwoFactorAction
  method        TwoFactorMethod?
  success       Boolean
  ipAddress     String?  @map("ip_address")
  userAgent     String?  @map("user_agent")
  errorMessage  String?  @map("error_message")
  createdAt     DateTime @default(now()) @map("created_at")

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([action])
  @@map("two_factor_logs")
}

enum TwoFactorAction {
  SETUP         // 2FA activated
  DISABLE       // 2FA disabled
  LOGIN_TOTP    // Login with TOTP code
  LOGIN_BACKUP  // Login with backup code
  LOGIN_SMS     // Login with SMS code
  LOGIN_SKIP    // Login skipped (trusted device)
  FAILED        // Failed attempt
}

enum TwoFactorMethod {
  TOTP
  BACKUP_CODE
  SMS
  TRUSTED_DEVICE
}

// =====================================================
// LICENSES
// =====================================================

model License {
  id            String   @id @default(cuid())
  licenseKey    String   @unique @map("license_key")
  apiToken      String?  @unique @default(cuid()) @map("api_token")
  clientName    String   @map("client_name")
  status        LicenseStatus @default(INACTIVE)
  startDate     DateTime @map("start_date")
  endDate       DateTime @map("end_date")
  siteUrl       String?  @map("site_url")
  isAssociated  Boolean  @default(false) @map("is_associated")
  lastUpdate    DateTime @default(now()) @map("last_update")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  emailStats    EmailStats[]
  smsStats      SmsStats[]
  deeplStats    DeeplStats[]
  openaiStats   OpenaiStats[]
  emailLogs     EmailLog[]
  smsLogs       SmsLog[]
  pois          Poi[]
  poiVisits     PoiVisit[]
  debugLogs     DebugLog[]

  @@map("licenses")
}

enum LicenseStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

// =====================================================
// EMAIL STATISTICS
// =====================================================

model EmailStats {
  id               String   @id @default(cuid())
  licenseId        String   @map("license_id")
  emailsSent       Int      @default(0) @map("emails_sent")
  lastUpdate       DateTime @default(now()) @map("last_update")
  createdAt        DateTime @default(now()) @map("created_at")

  license          License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("email_stats")
}

model EmailLog {
  id          String   @id @default(cuid())
  licenseId   String   @map("license_id")
  emailTo     String   @map("email_to")
  subject     String?
  status      String   // sent, delivered, opened, clicked, bounced, spam
  sendDate    DateTime @map("send_date")
  createdAt   DateTime @default(now()) @map("created_at")

  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([sendDate])
  @@map("email_logs")
}

// =====================================================
// SMS STATISTICS
// =====================================================

model SmsStats {
  id           String   @id @default(cuid())
  licenseId    String   @map("license_id")
  smsSent      Int      @default(0) @map("sms_sent")
  totalCost    Decimal  @default(0) @map("total_cost") @db.Decimal(10, 2)
  lastUpdate   DateTime @default(now()) @map("last_update")
  createdAt    DateTime @default(now()) @map("created_at")

  license      License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("sms_stats")
}

model SmsLog {
  id              String   @id @default(cuid())
  licenseId       String   @map("license_id")
  phone           String
  country         String?
  status          String   // sent, delivered, failed
  cost            Decimal  @default(0) @db.Decimal(10, 4)
  pricingVersion  String?  @map("pricing_version") // Version du tarif utilis√© (ex: "2025-01")
  sendDate        DateTime @map("send_date")
  createdAt       DateTime @default(now()) @map("created_at")

  license         License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([sendDate])
  @@index([country])
  @@map("sms_logs")
}

// =====================================================
// DEEPL STATISTICS
// =====================================================

model DeeplStats {
  id                    String   @id @default(cuid())
  licenseId             String   @map("license_id")
  translationsCount     Int      @default(0) @map("translations_count")
  charactersTranslated  Int      @default(0) @map("characters_translated")
  lastUpdate            DateTime @default(now()) @map("last_update")
  createdAt             DateTime @default(now()) @map("created_at")

  license               License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("deepl_stats")
}

// =====================================================
// OPENAI STATISTICS
// =====================================================

model OpenaiStats {
  id                 String   @id @default(cuid())
  licenseId          String   @map("license_id")
  requestsCount      Int      @default(0) @map("requests_count")
  promptTokens       Int      @default(0) @map("prompt_tokens")
  completionTokens   Int      @default(0) @map("completion_tokens")
  totalTokens        Int      @default(0) @map("total_tokens")
  totalCost          Decimal  @default(0) @map("total_cost") @db.Decimal(10, 4)
  lastUpdate         DateTime @default(now()) @map("last_update")
  createdAt          DateTime @default(now()) @map("created_at")

  license            License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([createdAt])
  @@map("openai_stats")
}

// =====================================================
// POI (Points of Interest)
// =====================================================

model Poi {
  id          String   @id @default(cuid())
  licenseId   String   @map("license_id")
  poiId       String   @map("poi_id")
  name        String
  type        String?
  address     String?
  latitude    Float
  longitude   Float
  visitCount  Int      @default(0) @map("visit_count")
  seasonData  String?  @map("season_data") // JSON stored as string (DEPRECATED - use PoiVisit instead)
  syncDate    DateTime @map("sync_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  license     License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  visits      PoiVisit[]

  @@unique([licenseId, poiId])
  @@index([licenseId])
  @@index([latitude, longitude])
  @@map("pois")
}

// =====================================================
// POI VISITS - Structured data for each visit
// =====================================================

model PoiVisit {
  id                String            @id @default(cuid())
  poiId             String            @map("poi_id")
  licenseId         String            @map("license_id")
  
  // Informations temporelles
  visitDate         DateTime          @default(now()) @map("visit_date")
  season            Season?           // Saison de la visite
  
  // Profil du visiteur
  visitorProfile    VisitorProfile?   @map("visitor_profile")
  stayDuration      StayDuration?     @map("stay_duration")
  countryOfOrigin   String?           @map("country_origin") // Code pays ISO (FR, US, JP, etc.)
  
  // Informations de r√©servation
  bookingMode       BookingMode?      @map("booking_mode")
  travelReason      TravelReason?     @map("travel_reason")
  
  // Transport et centres d'int√©r√™t (peuvent √™tre multiples)
  transportModes    String?           @map("transport_modes") // JSON array: ["car", "train", "plane"]
  interests         String?           // JSON array: ["culture", "nature", "gastronomy"]
  
  // M√©tadonn√©es
  roadpressId       String?           @map("roadpress_id") // ID depuis l'app Roadpress
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  poi               Poi               @relation(fields: [poiId], references: [id], onDelete: Cascade)
  license           License           @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([poiId])
  @@index([licenseId])
  @@index([visitDate])
  @@index([season])
  @@index([visitorProfile])
  @@index([countryOfOrigin])
  @@map("poi_visits")
}

// Enums pour les donn√©es structur√©es

enum Season {
  WINTER      // Hiver
  SPRING      // Printemps
  SUMMER      // √ât√©
  FALL        // Automne
}

enum VisitorProfile {
  SOLO              // Solo
  COUPLE            // Couple
  FAMILY            // Famille
  FRIENDS           // Amis
  ORGANIZED_GROUP   // Groupe organis√©
}

enum StayDuration {
  DAY_TRIP          // Excursion √† la journ√©e
  ONE_NIGHT         // 1 nuit
  TWO_TO_THREE      // 2-3 nuits
  FOUR_TO_SEVEN     // 4-7 nuits
  MORE_THAN_WEEK    // Plus d'une semaine
}

enum BookingMode {
  DIRECT            // R√©servation directe
  ONLINE_PLATFORM   // Plateforme en ligne (Booking, Airbnb, etc.)
  TRAVEL_AGENCY     // Agence de voyage
  TOUR_OPERATOR     // Tour op√©rateur
  OTHER             // Autre
}

enum TravelReason {
  LEISURE           // Loisirs
  BUSINESS          // Affaires
  FAMILY_VISIT      // Visite familiale
  EVENT             // √âv√©nement
  HEALTH            // Sant√©/Cure
  EDUCATION         // √âducation
  OTHER             // Autre
}

// =====================================================
// API KEYS CONFIGURATION
// =====================================================

model ApiKey {
  id        String   @id @default(cuid())
  service   String   @unique // deepl, openai, brevo, mapbox
  key       String
  isActive  Boolean  @default(true) @map("is_active")
  lastPush  DateTime? @map("last_push")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("api_keys")
}

// =====================================================
// SMS PRICING HISTORY
// =====================================================

model SmsPricingVersion {
  id          String   @id @default(cuid())
  version     String   // Ex: "2025-01", "2025-02", etc.
  description String?  // Ex: "Tarifs mis √† jour janvier 2025"
  isActive    Boolean  @default(false) // Une seule version active √† la fois
  effectiveFrom DateTime @map("effective_from") // Date d'entr√©e en vigueur
  effectiveTo   DateTime? @map("effective_to")   // Date de fin (null = active)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  pricingRules SmsPricingRule[]

  @@unique([version])
  @@index([isActive])
  @@index([effectiveFrom])
  @@map("sms_pricing_versions")
}

model SmsPricingRule {
  id          String   @id @default(cuid())
  versionId   String   @map("version_id")
  country     String   // Nom du pays (ex: "France", "Germany")
  pricePerSms Decimal  @map("price_per_sms") @db.Decimal(10, 4) // Prix par SMS en euros
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  version     SmsPricingVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, country])
  @@index([country])
  @@map("sms_pricing_rules")
}

// =====================================================
// DEBUG LOGS SYSTEM
// =====================================================

model DebugLog {
  id          String      @id @default(cuid())
  category    LogCategory
  action      String      // e.g., "sync", "api_push", "license_update"
  method      String?     // HTTP method (GET, POST, PUT, DELETE)
  endpoint    String?     // API endpoint called
  licenseId   String?     @map("license_id")
  clientName  String?     @map("client_name")
  status      LogStatus   @default(SUCCESS)
  message     String?     // Description or error message
  requestData Json?       @map("request_data")    // Input data
  responseData Json?      @map("response_data")   // Output/response data
  errorDetails String?    @map("error_details")   // Stack trace or detailed error
  duration    Int?        // Request duration in ms
  ipAddress   String?     @map("ip_address")
  userAgent   String?     @map("user_agent")
  timestamp   DateTime    @default(now())
  
  // Relations
  license     License?    @relation(fields: [licenseId], references: [id], onDelete: SetNull)

  @@index([category])
  @@index([status])
  @@index([timestamp])
  @@index([licenseId])
  @@index([action])
  @@map("debug_logs")
}

enum LogCategory {
  SYNC          // Synchronisation des donn√©es statistiques
  PUSH_API      // Envoi des cl√©s API aux sites clients
  LICENSE       // Op√©rations sur les licences
  API_KEYS      // Acc√®s aux cl√©s API (s√©curit√© critique)
  POI           // Op√©rations sur les points d'int√©r√™t
  AUTH          // Authentification et autorisations
  SYSTEM        // Logs syst√®me g√©n√©raux
  ERROR         // Erreurs critiques
  SECURITY      // √âv√©nements de s√©curit√© (tentatives d'acc√®s non autoris√©es, anomalies)
}

enum LogStatus {
  SUCCESS
  WARNING
  ERROR
  INFO
}
